{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.0",
    "title": "Slim mom",
    "description": "Showing off swagger-ui-express",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "servers": [
    {
      "url": "https://slim-mom-5group.herokuapp.com/"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Users endpoints. Interaction with user info."
    },
    {
      "name": "Products",
      "description": "Products endpoints. Interaction with products info."
    }
  ],
  "paths": {
    "/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Search the product list",
        "parameters": [
          {
            "in": "query",
            "name": "query",
            "required": true,
            "type": "string",
            "description": "Title of product to search"
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "type": "number",
            "description": "Page of products list to return (default is 1)"
          },
          {
            "in": "query",
            "name": "limit",
            "required": false,
            "type": "number",
            "description": "Amount of products per page (default is 7)"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
   "/products/recommendation": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of not recommended product categories",
        "parameters": [{
            "in": "query",
            "name": "bloodGroup",
            "required": true,
            "type": "number",
            "description": "User's blood group"
          }],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Returns a list of not recommended product categories and save user's physiological parameters",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "User's blood number",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Not authorized - wrong token"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Add the eaten product on a specific day",
        "parameters": [],
        "requestBody": {
          "description": "Product's information",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddEatenProductsRequest"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "201": {
            "description": "Product successfully saved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddEatenProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/products/eaten" : {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get the eaten product on a specific day",
        "parameters": [{
            "in": "query",
            "name": "date",
            "required": true,
            "type": "string",
            "description": "Date of the day to search eaten product list, format: DD.MM.YYYY"
          }],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEatenProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          }
        }
      }
    },
    "/users/registration": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User registration",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation - user created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User's login",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "User's login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - login or password  is wrong",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User's logout",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "204": {
            "description": "No content - successful logout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogoutResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - wrong token",
            "content": {}
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Ð¡hecks if the user is logged in",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - wrong token",
            "content": {}
          }
        }
      }
    },
    "/users/info": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Return user's physiological data and list of products not recommended to eat",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - wrong token",
            "content": {}
          }
        }
      }
    },
    "/products/:id": {
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Delete the product which was added to eaten list",
        "parameters": [
          {
            "params": "id"
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteEatenProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": [
          "login",
          "email",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "loginName"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          },
          "height" : {
            "type": "number",
            "description": "User's height",
            "example": 178
          },
          "weight" : {
            "type": "number",
            "description": "User's weight",
            "example": 63
          },
          "desiredWeight" : {
            "type": "number",
            "description": "User's desired weight",
            "example": 60
          },
          "age" : {
            "type": "number",
            "description": "User's age",
            "example": 34
          },
          "bloodGroup": {
            "type": "number",
            "description": "User's bloodGroup",
            "example": 3
          }
        }
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "login": {
            "type": "string",
            "description": "User's login (unique)",
            "example": "loginName"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "login",
          "password"
        ],
        "properties": {
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "loginName"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "qwerty123"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "fgjfdng545567gjthjn9n9l86545456fdgdfgddfd"
          },
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "loginName"
          }
        }
      },
      "CurrentResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "fgjfdng545567gjthjn9n9l86545456fdgdfgddfd"
          },
          "login": {
            "type": "string",
            "description": "User's login",
            "example": "loginName"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "example": "mailName@gmail.com"
          }
        },
        "example" : {
           "message": "success",
          "user": {
            "token": "eyJhbGciOiJiuzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MTAyOTE0ZWQ5N2ZiOGUxZjQ5YzM4ZTciLCJsb2dpbiI6Im5uc25kMTIzIiwiaWF0IjoxNjI3NTU4Njc4fQ.B3G8sAvJUn8rQ382JXEGbdJhOtAY05K_NGxYVrwtH6w",
            "login": "example",
            "email": "example@gmail.com"
         }
        }
      },
      "userInfoResponse": {
        "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "productsNotAllowed": {
              "type": "array",
              "description": "Product's category",
              "example": [
                "Ð¼ÑÑÐ½ÑÐµ",
                    "Ð¼Ð¾Ð»Ð¾ÑÐ½ÑÐµ",
                    "Ð¼ÑÑÐ¾"
              ]
            },
            "age": {
              "type": "number",
              "description": "User's age",
              "example" : 33
            },
            "height": {
              "type": "number",
              "description":"User's height",
              "example" : 180
            },
            "weight": {
              "type": "number",
              "description":"User's weight",
              "example" : 62
            },
            "bloodGroup": {
              "type": "number",
              "description":"User's blood group",
              "example" : 3
            },
            "desiredWeight": {
              "type": "number",
              "description":"User's desired weight",
              "example" : 57
            }
          },
              "example": {
                "message": "success",
                "userInfo": {
                "height": 176,
                "weight": 60,
                "age": 26,
                "desiredWeight": 56,
                "bloodGroup": 2,
                "productsNotAllowed": [
                    "Ð¼ÑÑÐ½ÑÐµ",
                    "Ð¼Ð¾Ð»Ð¾ÑÐ½ÑÐµ",
                    "Ð¼ÑÑÐ¾"
                ]}
              }
      },
      "LogoutRequest": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "User's token",
            "example": "fnfninboibi4376548327y6h5g2ivu5h245y"
          }
        }
      },
      "LogoutResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": null,
            "description": "User's token",
            "example": "  "
          }
        }
      },
      "SearchProductResponse": {
        "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "categories": {
              "type": "array",
              "description": "Product's category",
              "example": [
                "ÑÐ¹ÑÐ°"
              ]
            },
            "weight": {
              "type": "number",
              "description": "Standard product's weight (100g) ",
              "example": "100"
            },
            "title": {
              "type": "object",
              "description": "Product's title",
              "example": {
                "ru": "Ð¯Ð¹ÑÐ¾ ÐºÑÑÐ¸Ð½Ð¾Ðµ (Ð¶ÐµÐ»ÑÐ¾Ðº ÑÑÑÐ¾Ð¹)",
                "ua": "Ð¯Ð¹ÑÐµ ÐºÑÑÑÑÐµ (Ð¶Ð¾Ð²ÑÐ¾Ðº ÑÑÑÐ¸Ð¹)"
              }
            },
            "calories": {
              "type": "number",
              "description": "Product's calories (for 100g)",
              "example": "623"
            }
          }
        },
        "example": 
          [
            {
              "categories": [
                "ÑÐ¹ÑÐ°"
              ],
              "weight": 100,
              "title": {
                "ru": "Ð¯Ð¹ÑÐ¾ ÐºÑÑÐ¸Ð½Ð¾Ðµ (Ð¶ÐµÐ»ÑÐ¾Ðº ÑÑÑÐ¾Ð¹)",
                "ua": "Ð¯Ð¹ÑÐµ ÐºÑÑÑÑÐµ (Ð¶Ð¾Ð²ÑÐ¾Ðº ÑÑÑÐ¸Ð¹)"
              },
              "calories": 623
            },
            {
              "categories": [
                "Ð¼ÑÑÐ½ÑÐµ"
              ],
              "weight": 100,
              "title": {
                  "ru": "Ð¡Ð¼ÐµÑÑ Ð¼ÑÑÐ½Ð°Ñ Ð±ÐµÐ· Ð³Ð»ÑÑÐµÐ½Ð° ÐÐ°ÑÐ½ÐµÑ Ð¨Ð¾ÐºÐ¾Ð»Ð°Ð´Ð½ÑÐ¹ ÑÐ¾ÑÑ",
                  "ua": "Ð¡ÑÐ¼ÑÑ Ð±Ð¾ÑÐ¾ÑÐ½ÑÐ½Ð° Ð±ÐµÐ· Ð³Ð»ÑÑÐµÐ½Ñ ÐÐ°ÑÐ½ÐµÑÑ Ð¨Ð¾ÐºÐ¾Ð»Ð°Ð´Ð½Ð¸Ð¹ ÑÐ¾ÑÑ"
              },
              "calories": 350
            }
          ]
      },
      "RecommendationResponse": {
        "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "productsNotAllowed": {
              "type": "array",
              "description": "List of categories not allowed",
              "example": [
                "Ð¼ÑÑÐ½ÑÐµ",
                "Ð¼Ð¾Ð»Ð¾ÑÐ½ÑÐµ",
                "Ð¼ÑÑÐ¾"
              ]
            }
          }
        },
        "example": {
          "message": "success",
          "productsNotAllowed": [
            "Ð¼ÑÑÐ½ÑÐµ",
            "Ð¼Ð¾Ð»Ð¾ÑÐ½ÑÐµ",
            "Ð¼ÑÑÐ¾"
          ]
        }
      },
      "AddEatenProductsRequest": {
        "type": "object",
        "required": [
          "title",
          "weight",
          "calories",
          "date"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Product's title",
            "example": "Banana"
          },
          "weight": {
            "type": "number",
            "description": "Product's weight",
            "example": "170"
          },
          "calories": {
            "type": "number",
            "description": "Eaten product's calories",
            "example": "450"
          },
          "date": {
            "type": "string",
            "description": "Date product was eaten, format: DD.MM.YYYY",
            "example": "29.07.2021"
          }
        }
      },
      "AddEatenProductsResponse": {
        "type": "object",
        "items": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Result of operation"
            },
            "product": {
              "type": "object",
              "description": "Description of saved product"
            }
          }
        },
        "example": {
          "message": "Product successfully saved",
          "product" : {
              "_id": "610194d7cdcd37c2ca8d3225",
              "title": "pizza",
              "weight": "100",
              "calories": "320",
              "date": "01.06.21"
          }
        }
      },
      "GetEatenProductsResponse": {
        "type": "object",
        "items": {
          "type": "array",
          "properties": {
            "userFoodListByDay": {
              "type": "array",
              "description": "User's eaten products list at required day"
            }
          }
        },
        "example": {
          "message": "success",
          "userFoodListByDay": [
            {
              "_id": "610194d7cdcd37c2ca8d3225",
              "title": "pizza",
              "weight": "100",
              "calories": "320",
              "date": "01.06.21"
            },
            {
              "_id": "610194d7cdcd37c2ca8d3390",
              "title": "banana",
              "weight": "100",
              "calories": "220",
              "date": "01.06.21"
            }
          ]
        }
      },
      "DeleteEatenProductsResponse": {
        "type": "object",
        "items": {
          "type": "string",
          "properties": {
            "message": {
              "type": "string",
              "description": "Result of operation"
            }
          }
        },
         "example": {
            "message": "Product has been successfully deleted"
          }
      }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}

